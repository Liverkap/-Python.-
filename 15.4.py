#                               —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã

# –î–æ —Å–∏—Ö –ø–æ—Ä –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —è–∑—ã–∫–∞ —Å–æ —Å–≤–æ–∏–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–º —Ä–∞–±–æ—Ç—ã.
# –ù–æ, –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–∫–∂–µ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ –æ—Å–æ–±–æ–≥–æ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–æ–≤. –ë—ã–≤–∞—é—Ç —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, —Å–ø–∏—Å–∫–∏, –∫–æ—Ä—Ç–µ–∂–∏, —Å–ª–æ–≤–∞—Ä–∏,
# –º–Ω–æ–∂–µ—Å—Ç–≤–∞. –ê –±—ã–≤–∞—é—Ç ‚Äî —Ñ—É–Ω–∫—Ü–∏–∏. –£ –∫–∞–∂–¥–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤ –µ—Å—Ç—å —Å–≤–æ–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å–≤–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –Ω–æ –≤—Å–µ –æ–Ω–∏ ‚Äî –æ–±—ä–µ–∫—Ç—ã


# num = 17
# numbers = [1, 2, 3]
# colors = (1, 2, 3)
# name = 'Python'
#
# print(type(num))
# print(type(numbers))
# print(type(colors))
# print(type(name))


# –ü–æ—Å–∫–æ–ª—å–∫—É —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ–∂–µ –æ–±—ä–µ–∫—Ç—ã, —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏ –º–æ–∂–Ω–æ –∏ –∫–∞–∫ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏: –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º, –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –∏ —Ç.–¥.

# def hello():
#     print('Hello from function')
#
#
# func = hello     #  –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π func —Ñ—É–Ω–∫—Ü–∏—é hello
# func()           #  –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
#
#
# writeln = print            # –∫–∞–∫ –≤ —è–∑—ã–∫–µ Pascal üòÄ
#
# writeln('Hello world!')
# writeln('Python')

# –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º —Å–µ–±–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ –∏–º—è –∫–æ–º–∞–Ω–¥—ã.
# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ start ‚Äî –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é start(), –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ stop ‚Äî —Ñ—É–Ω–∫—Ü–∏—é stop(), –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ pause ‚Äî —Ñ—É–Ω–∫—Ü–∏—é pause().

# def start():
#     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ start
#     pass
#
#
# def stop():
#     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ stop
#     pass
#
#
# def pause():
#     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ pause
#     pass
#
#
# command = input()  # —Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
#
# if command == 'start':
#     start()
# elif command == 'stop':
#     stop()
# elif command == 'pause':
#     pause()

# –û–¥–Ω–∞–∫–æ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è, —Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä if –ø–æ–ª—É—á–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –≥—Ä–æ–º–æ–∑–¥–∫–∏–º. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–æ–º —Å–ª—É–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è

# def start():
#     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ start
#     pass
#
#
# def stop():
#     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ stop
#     pass
#
#
# def pause():
#     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ pause
#     pass
#
#
# commands = {'start': start, 'stop': stop, 'pause': pause}  # —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–º–∞–Ω–¥–∞ ‚Üí —Ñ—É–Ω–∫—Ü–∏—è
#
# command = input()  # —Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
#
# commands[command]()  # –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª—é—á—É


#               *****************       –§—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π*************

# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–∑–≤–æ–ª—è–µ—Ç, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –≠—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤–æ –º–Ω–æ–≥–∏—Ö —è–∑—ã–∫–∞—Ö, –Ω–æ –≤ Python –ø—Ä–æ—â–µ, –±–ª–∞–≥–æ–¥–∞—Ä—è –µ–≥–æ –≥–∏–±–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏.

# –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –º–Ω–æ–≥–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Ç–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ—é—â—É—é—Å—è.
#
# –ù–æ –ª–æ–≥–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –û–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é plot(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
# 3
# 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: f ‚Äì —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫, –∏ a, b ‚Äì –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.

# –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ plot() –º—ã –º–æ–∂–µ–º —É–∫–∞–∑–∞—Ç—å, –¥–ª—è –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Å—Ç—å —É –Ω–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

# def plot(f, a, b):
#     pass
#
# def square_add_one(x):
#     return x * x + 1
#
#
# def cube_add_square(x):
#     return x ** 3 + x ** 2
#
# plot(square_add_one, 1, 10)

# –§—É–Ω–∫—Ü–∏–∏, —Å–ø–æ—Å–æ–±–Ω—ã–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–ª–∏/–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞.!!!!!!!!!


#                   **********************      –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤       ***
# numbers = [10, -7, 8, -100, -50, 32, 87, 117, -210]
#
# print(max(numbers))
# print(min(numbers))
# print(sorted(numbers))
#
# # –ù–æ —á—Ç–æ, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ –º–æ–¥—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ numbers? –ò –≤–æ–æ–±—â–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –∞ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏?
# #
# # –ù–∞ —ç—Ç–æ—Ç —Å–ª—É—á–∞–π –≤—Å–µ –≤—ã—à–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key ‚Äì —Ñ—É–Ω–∫—Ü–∏—é,
# # –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏–µ key –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π, –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–π –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–π –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
#
# # –§—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä (compare ‚Äì —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å)
# # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ min(), max(), sorted() ‚Äì —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
#
# numbers = [10, -7, 8, -100, -50, 32, 87, 117, -210]
#
# print(max(numbers, key=abs))        #  —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é abs –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
# print(min(numbers, key=abs))        #  —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é abs –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
# print(sorted(numbers, key=abs))     #  —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é abs –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞

# –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ sorted() (–∏–ª–∏ —Å–ø–∏—Å–æ—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ sort()) —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–π–¥–µ—Ç –ø–æ –ø–µ—Ä–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–∞—Ä –∫–æ—Ä—Ç–µ–∂–∞, –∞ –≤ —Å–ª—É—á–∞–µ –∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Äì –ø–æ –≤—Ç–æ—Ä—ã–º.
# points = [(1, -1), (2, 3), (-10, 15), (10, 9), (7, 18), (1, 5), (2, -4)]
#
# points.sort()    #  —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –Ω–∞ –º–µ—Å—Ç–µ
#
# print(points)
#
# # ***********
# def compare_by_second(point):
#     return point[1]
#
#
# def compare_by_sum(point):
#     return point[0] + point[1]
#
#
# points = [(1, -1), (2, 3), (-10, 15), (10, 9), (7, 18), (1, 5), (2, -4)]
#
# print(sorted(points, key=compare_by_second))   # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ç–æ—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ—Ä—Ç–µ–∂–∞
# print(sorted(points, key=compare_by_sum))



#           ******************      –§—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π     **********

# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–¥, –≥–¥–µ —Ñ—É–Ω–∫—Ü–∏—è generator() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é hello() –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã.
# def generator():
#     def hello():
#         print('Hello from function!')
#     return hello
#
# func = generator()
# func()

#  –í Python –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –≤–µ–¥—å —Ñ—É–Ω–∫—Ü–∏—è —ç—Ç–æ –æ–±—ä–µ–∫—Ç.

# def generator_square_polynom(a, b, c):
#     def square_polynom(x):
#         return a * x**2 + b * x + c
#
#     return square_polynom
#
# f = generator_square_polynom(a=1, b=2, c=1)
# g = generator_square_polynom(a=2, b=0, c=-3)
# h = generator_square_polynom(a=-3, b=-10, c=50)
#
# print(f(1))
# print(g(2))
# print(h(-1))

# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è square_polynom() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ generator_square_polynom(). –¢–∞–∫—É—é –≤–ª–æ–∂–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–∑—ã–≤–∞—é—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ–º.
#
# –ó–∞–º—ã–∫–∞–Ω–∏—è ‚Äì –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å—Å—ã–ª–∞—é—â–∏–µ—Å—è –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –≤–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∏ –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –§—É–Ω–∫—Ü–∏—è sorted() –∏ —Å–ø–∏—Å–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ sort() –ø–æ–º–∏–º–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ key –ø—Ä–∏–Ω–∏–º–∞—é—Ç –µ—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç reverse,
# –∫–æ—Ç–æ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ False, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ reverse —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ True, –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ñ—É–Ω–∫—Ü–∏–∏ sorted() –∏ —Å–ø–∏—Å–æ—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ sort() —Å—Ç–∞–±–∏–ª—å–Ω–∞, —Ç–æ –µ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–∞–≤–Ω—ã—Ö –º–µ–∂–¥—É —Å–æ–±–æ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

# def comparator(item):
#     return item[0]
#
#
# data = [('red', 1), ('blue', 2), ('green', 5), ('blue', 1)]
# data.sort(key=comparator)   # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—é
#
# print(data)
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –§—É–Ω–∫—Ü–∏–∏ max() –∏ min() –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø–µ—Ä–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –ù–∞–¥–æ —á–µ—Ç–∫–æ –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –∫–æ–¥ print(input()) –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç print(input).
# –ö–æ–¥ print(input()) –∑–∞–ø—Ä–æ—Å–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –∏ —Ç—É—Ç –∂–µ –µ–≥–æ –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏—è input() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞.
# –ö–æ–¥ print(input) –≤—ã–¥–∞—Å—Ç –Ω–∞–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: —Å—Ç—Ä–æ–∫—É built-in function input, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è—Å–Ω—è–µ—Ç, —á—Ç–æ input ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —è–∑—ã–∫–∞.

# ***********
# s1 = 'python'
# s2 = 'stepicon'
# s3 = 'beegeek'
#
# print(min(s1, s2, s3))
# print(max(s1, s2, s3))
#
# # ***********
# s1 = 'python'
# s2 = 'stepicon'
# s3 = 'beegeek'
#
# print(min(s1, s2, s3, key=len))
# print(max(s1, s2, s3, key=len))
#
# # **********
# def f(x):
#     return x**2
#
#
# g = f
# print(f(3), g(5))
#
# # **********
# def f(x):
#     return x**2
#
#
# def g(x):
#     return x**3
#
#
# funcs = [f, g]
# print(funcs[0](5), funcs[1](5))
#
# # *********
# def comparator(pair):
#     return pair[1]
#
#
# pairs = [(5, 4), (3, 2), (1, 7), (8, 2)]
# pairs.sort(key=comparator)
# print(pairs)
#
# # ***********
# def comparator(pair):
#     return pair[0] + pair[1]
#
#
# pairs = [(5, 4), (3, 2), (1, 7), (8, 2)]
# pairs.sort(key=comparator, reverse=True)
# print(pairs)
#
# # **********
# words = ['this', 'is', 'a', 'test', 'of', 'sorting']
# words.sort(key=len)
# print(words)
#
# # ************
# def f1(x):
#     return 2*x+1
#
#
# def f2(x):
#     return x**2
#
#
# def f3(x):
#     return -x**2+1
#
#
# def f4(x):
#     return x-3
#
#
# funcs = [f1, f2, f3, f4]
# i = int(input())
# print(funcs[i](2))

# **********
# numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99), (89, 9, 34), (10, 20, 30, -2),
#            (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6), (-9, 8, 4), (90, 1, -45, -21)]
#
# def averange(x):
#     return sum(x) // len(x)
#
#
# print(min(numbers, key=averange))
# print(max(numbers, key=averange))
#
# # *************(–û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
# from statistics import mean
# numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99), (89, 9, 34), (10, 20, 30, -2), (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6), (-9, 8, 4), (90, 1, -45, -21)]
#
# print(*(func(numbers, key=mean) for func in (min, max)), sep='\n')

# *************
# points = [(-1, 1), (5, 6), (12, 0), (4, 3), (0, 1), (-3, 2), (0, 0), (-1, 3), (2, 0), (3, 0), (-9, 1), (3, 6), (8, 8)]
#
# def compare(pair):
#     return (pair[0] ** 2 + pair[1] ** 2) ** 0.5
#
# points.sort(key=compare)
#
# print(points)

# *************
# numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100), (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]
#
#
# def compare(pair):
#     return min(pair) + max(pair)
#
#
# print(sorted(numbers, key=compare))

# *************(–û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
# numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100), (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]
#
# def com(x):
#     return min(x) + max(x)
#
# numbers.sort(key=com)
#
# print(numbers)


# –°–û–†–¢–ò–†–£–ô –ö–ê–ö –•–û–ß–ï–®–¨
# athletes = [('–î–∏–º–∞', 10, 130, 35), ('–¢–∏–º—É—Ä', 11, 135, 39), ('–†—É—Å–ª–∞–Ω', 9, 140, 33), ('–†—É—Å—Ç–∞–º', 10, 128, 30), ('–ê–º–∏—Ä', 16, 170, 70), ('–†–æ–º–∞', 16, 188, 100), ('–ú–∞—Ç–≤–µ–π', 17, 168, 68), ('–ü–µ—Ç—è', 15, 190, 90)]
#
# x = int(input())
# def compare(athlet):
#     return athlet[x - 1]
#
# athletes.sort(key=compare)
#
# for el in athletes:
#     print(*el)
#
# # *********(–û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)(–ß–ï–†–ï–ó –ó–ê–ú–´–ö–ê–ù–ò–ï)
# athletes = [('–î–∏–º–∞', 10, 130, 35), ('–¢–∏–º—É—Ä', 11, 135, 39), ('–†—É—Å–ª–∞–Ω', 9, 140, 33), ('–†—É—Å—Ç–∞–º', 10, 128, 30), ('–ê–º–∏—Ä', 16, 170, 70), ('–†–æ–º–∞', 16, 188, 100), ('–ú–∞—Ç–≤–µ–π', 17, 168, 68), ('–ü–µ—Ç—è', 15, 190, 90)]
#
# def gen_comparator(field=1):
#     def comp(seq):
#         return seq[field - 1]
#     return comp
#
# cmp = gen_comparator(int(input()))
# athletes.sort(key=cmp)
# for a in athletes:
#     print(*a)


# –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò








#                   ****************    тип данных complex

# Урок посвящен комплексным числам, модулям complex и cmath , а также типу данных Complex



# Комплексные числа в математике

# z = 1 + 1j
#
# x = z ** 3 + z ** 2 + z + 1
#
# print(x)

#       **********      Комплексные числа в Python      ********


# z1 = 5 + 7j
# z2 = 1j
# z3 = -3 + 5J
# z4 = 1.5 + 3.2j
#
# print(z1, z2, z3, z4, sep='\n')
# print(type(z1))


#               *************   Создание комплексных чисел        ***********

# Комплексные числа можно создать с помощью литерала, как выше, а можно с помощью функции complex(), которая принимает два аргумента: вещественную и мнимую часть числа, либо строковое представление числа.

# z1 = -3 + 2j              # создание на основе литерала
# z2 = complex(6, -8)       # z2 = 6 - 8j
# z3 = complex(0, 2.5)      # z3 = 2.5j
# z4 = complex(5, 0)        # z4 = 5 + 0j
# z5 = complex('3+4j')      # создание на основе строки
#
# print(z1, z2, z3, z4, z5, sep='\n')


#           *************       Арифметические операции над комплексными числами        ******


# ****************          Методы и свойства комплексных чисел         *********

# Для получения действительной и мнимой частей комплексного числа используются свойства real и imag
# z = 3+4j
#
# print('Действительная часть =', z.real)
# print('Мнимая часть =', z.imag)

# Python представляет комплексное число как два вещественных числа


# Для нахождения сопряженного комплексного числа, можно использовать метод conjugate()

# Для нахождения модуля комплексного числа, используется встроенная функция abs()
# z = 3+4j
#
# print('Модуль числа =', abs(z))

# Примечание 3. Встроенный модуль math работает с вещественными числами. Для работы с комплексными числами есть модуль cmath.
# Модуль cmath включает дополнительные функции для использования комплексных чисел.
# import cmath
#
# z = 2+3j
# print(cmath.phase(z)) # полярный угол
# print(cmath.polar(z)) # полярные координаты



# ОПЕРАЦИИ НАД КОМПЛЕКСНЫМИ ЧИСЛАМИ

# z1, z2 = complex(input()), complex(input())
#
# print(f'{z1} + {z2} = {z1 + z2}')
# print(f'{z1} - {z2} = {z1 - z2}')
# print(f'{z1} * {z2} = {z1 * z2}')

# **************
# numbers = [3 + 4j, 3 + 1j, -7 + 3j, 4 + 8j, -8 + 10j, -3 + 2j, 3 - 2j, -9 + 9j, -1 - 1j, -1 - 10j, -20 + 15j, -21 + 1j, 1j, -3 + 8j, 4 - 6j, 8 + 2j, 2 + 3j]
#
# modul = 0
# number = 0
# for el in numbers:
#     if modul < abs(el):
#         modul = abs(el)
#         number = el
#
# print(number)
# print(modul)

# *********** (ОТ ПРЕПОДАВАТЕЛЯ)
# numbers = [3 + 4j, 3 + 1j, -7 + 3j, 4 + 8j, -8 + 10j, -3 + 2j, 3 - 2j, -9 + 9j, -1 - 1j, -1 - 10j, -20 + 15j, -21 + 1j,
#            1j, -3 + 8j, 4 - 6j, 8 + 2j, 2 + 3j]
# result = 0
#
# for num in numbers:
#     if abs(num) > abs(result):
#         result = num
#
# print(result, abs(result), sep='\n')

# СОПРЯЖЕННЫЕ ЧИСЛА

# n, z1, z2 = int(input()), complex(input()), complex(input())
#
# res = z1 ** n + z2 ** n + z1.conjugate() ** n + z2.conjugate() ** (n + 1)
#
# print(res)
#
#
# # СОПРЯЖЕННЫЕ ЧИСЛА (ОТ ПОЛЬЗОВАТЕЛЯ)(РАСПИСАНЫ СОПРЯЖЕННЫЕ ЧИСЛА)
# n = int(input())
# z1, z2 = complex(input()), complex(input())
# z_1 = complex(z1.real, z1.imag * (-1))
# z_2 = complex(z2.real, z2.imag * (-1))
# x = z1 ** n + z2 ** n + z_1**n + z_2**(n+1)
# print(x)








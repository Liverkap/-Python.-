#                                     НЕОБЯЗАТЕЛЬНЫЕ И ИМЕНОВАННЫЕ АРГУМЕНТЫ

#               Позиционные аргументы
# Все ранее написанные нами функции имели позиционные аргументы. Такие аргументы передаются без указания имен.
# Они называются позиционными, потому что именно по позиции, расположению аргумента, функция понимает, какому параметру он соответствует

# def diff(x, y):
#     return x - y
#
#
# res = diff(10, 3)    # используем позиционные аргументы
# print(res)


#                Именованные аргументы

# Аргументы, передаваемые с именами, называются именованными. При вызове функции можно использовать имена параметров из ее определения.
# Исключение составляют списки аргументов неопределенной длины, где используются аргументы со звездочкой
# def diff(x, y):
#     return x - y
#
#
# res = diff(x=10, y=3)   # используем именованные аргументы
# print(res)

#       ***************         Когда стоит применять именованные аргументы           ****

# Каких-то строгих правил на этот счёт не существует. Однако широко практикуется такой подход: если функция принимает
# больше трёх аргументов, нужно хотя бы часть из них указать по имени. Особенно важно именовать значения аргументов,
# когда они относятся к одному типу, ведь без имен очень трудно понять, что делает функция с подобным вызовом


# def make_circle(x, y, radius, line_width, fill):
#     # тело функции
#
# make_circle(200, 300, 17, 2.5, True)
#
# make_circle(x=200, y=300, radius=17, line_width=2.5, fill=True)

# Комбинирование позиционных и именованных аргументов

# Мы можем вызывать функции, используя именованные и позиционные аргументы одновременно. Но позиционные значения должны быть указаны до любых именованных!

# res = diff(10, y=3)   # используем позиционный и именованный аргумент







#                                       СЛОВАРИ

# словари – изменяемые коллекции элементов с произвольными индексами – ключами.


# languages = ['Python', 'C#', 'Java', 'C++']
#
# print(languages[0])
# print(languages[2])

# Хранить еще один список, где по соответствующему индексу будет находиться имя создателя языка программирования.
# languages = ['Python', 'C#', 'Java', 'C++']
# creators = ['Гвидо ван Россум', 'Андерс Хейлсберг', 'Джеймс Гослинг', 'Бьёрн Страуструп']
#
# print('Создателем языка', languages[0], 'является', creators[0])
#
# # Хранить список кортежей с парами значений "язык - имя создателя" в каждом
# languages = [('Python', 'Гвидо ван Россум'),
#              ('C#', 'Андерс Хейлсберг'),
#              ('Java', 'Джеймс Гослинг'),
#              ('C++', 'Бьёрн Страуструп')]
#
# print('Создателем языка', languages[2][0], 'является', languages[2][1])
#
#
# languages = [('Python', 'Гвидо ван Россум'),
#              ('C#', 'Андерс Хейлсберг'),
#              ('Java', 'Джеймс Гослинг'),
#              ('C++', 'Бьёрн Страуструп')]
#
# for item in languages:
#     if item[0] == 'C++':
#         print('Создателем языка', item[0], 'является', item[1])


# Словарь — реализация структуры данных "ассоциативный массив" или "хеш таблица". В других языках аналогичная структура называется map, HashMap, Dictionary.


# СОЗДАНИЕ СЛОВАРЯ

# languages = {'Python': 'Гвидо ван Россум',
#              'C#': 'Андерс Хейлсберг',
#              'Java': 'Джеймс Гослинг',
#              'C++': 'Бьёрн Страуструп'}


#           ******************  Обращение к элементу словаря    *************
# languages = {'Python': 'Гвидо ван Россум',
#              'C#': 'Андерс Хейлсберг',
#              'Java': 'Джеймс Гослинг',
#              'C++': 'Бьёрн Страуструп'}
#
# print('Создателем языка C# является', languages['C#'])


# languages = {'Python': 'Гвидо ван Россум',
#              'C#': 'Андерс Хейлсберг',
#              'Java': 'Джеймс Гослинг',
#              'C++': 'Бьёрн Страуструп'}
#
# print('Создателем языка C# является', languages['C' + '#'])


# Создание словаря с помощью функции dict()

# Если ключи словаря — строки без каких-либо специальных символов, то для создания словаря можно использовать функцию dict()

# info = dict(name = 'Timur', age = 28, job = 'Teacher')

# Создание словаря на основании списков и кортежей

# info_list = [('name', 'Timur'), ('age', 28), ('job', 'Teacher')]  # список кортежей
#
# info_dict = dict(info_list)  # создаем словарь на основе списка кортежей
#
# print(info_dict)

#
# info_tuple = (['name', 'Timur'], ['age', 28], ['job', 'Teacher'])  # кортеж списков
#
# info_dict = dict(info_tuple)  # создаем словарь на основе кортежа списков

# Если необходимо создать словарь, каждому ключу которого соответствует одно и то же значение, можно воспользоваться методом fromkeys()
# dict1 = dict.fromkeys(['name', 'age', 'job'], 'Missed information')
# print(dict1)

# Если методу fromkeys() не передать второй параметр, то по умолчанию присваивается значение None
#
# dict1 = dict.fromkeys(['name', 'age', 'job'])

# Пустой словарь можно создать двумя способами:
#
# с помощью пустых фигурных скобок;
# с помощью функции dict().


# Вывод словаря

# languages = {'Python': 'Гвидо ван Россум',
#              'C#': 'Андерс Хейлсберг',
#              'Java': 'Джеймс Гослинг'}
#
# info = dict(name = 'Timur', age = 28, job = 'Teacher')
#
# print(languages)
# print(info)

# Начиная с версии Python 3.6 словари являются упорядоченными, то есть сохраняют порядок следования ключей в порядке их внесения в словарь.


#  Создать словарь на основании двух списков (кортежей) можно с помощью встроенной функции-упаковщика zip()

# keys = ['name', 'age', 'job']
# values = ['Timur', 28, 'Teacher']
#
# info = dict(zip(keys, values))
#
# print(info)


#                                                    Особенности словарей

# Ключи должны быть уникальными
# Cловарь не может иметь два и более значений по одному и тому же ключу. Если при создании словаря (в литеральной форме)
# указать дважды один и тот же ключ, будет использовано последнее из указанных значений.


# Ключи должны быть неизменяемым типом данных

# число;
# строка;
# булево значение;
# кортеж;
# замороженное множество (frozenset);

# my_dict = {198: 'beegeek', 'name': 'Bob', True: 'a', (2, 2): 25}

# Значения могут относиться к любому типу данных, их тип данных произволен

# Нет никаких ограничений для значений, хранящихся в словарях. Значения в словарях могут принадлежать к произвольному типу данных и повторяться для разных ключей многократно.

# my_dict1 = {'a': [1, 2, 3], 'b': {1, 2, 3}}           # значения – изменяемый тип данных
#
# my_dict2 = {'a': [1, 2], 'b': [1, 2], 'c': [1, 2]}    # значения повторяются




